{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, render_template, request, redirect\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Initialize patient queue\n",
    "user_queue = None\n",
    "\n",
    "# Load the trained model\n",
    "loaded_model = 'retrained_decision_tree_model.pkl'\n",
    "\n",
    "\n",
    "class PatientQueue:\n",
    "    def __init__(self, model_file):\n",
    "        self.queue = []\n",
    "        self.model = self.load_model(model_file)\n",
    "\n",
    "    def load_model(self, model_file):\n",
    "        # Your model loading code here\n",
    "\n",
    "    def insert(self, patient_features):\n",
    "        # Your insert method code here\n",
    "\n",
    "    def pop(self):\n",
    "        # Your pop method code here\n",
    "\n",
    "\n",
    "@app.route('/', methods=['GET', 'POST'])\n",
    "def index():\n",
    "    global user_queue\n",
    "    if request.method == 'POST':\n",
    "        # Collect patient information\n",
    "        diastolic_bp = float(request.form['diastolic_bp'])\n",
    "        systolic_bp = float(request.form['systolic_bp'])\n",
    "        blood_sugar = float(request.form['blood_sugar'])\n",
    "        oxygen_level = float(request.form['oxygen_level'])\n",
    "        heart_rate = float(request.form['heart_rate'])\n",
    "        body_temp = float(request.form['body_temp'])\n",
    "        breath_rate = float(request.form['breath_rate'])\n",
    "        urinalysis_ph = float(request.form['urinalysis_ph'])\n",
    "        peak_flow = float(request.form['peak_flow'])\n",
    "        hydration_level = float(request.form['hydration_level'])\n",
    "\n",
    "        # Create patient feature vector\n",
    "        patient_features = [diastolic_bp, systolic_bp, blood_sugar, oxygen_level,\n",
    "                            heart_rate, body_temp, breath_rate, urinalysis_ph,\n",
    "                            peak_flow, hydration_level]\n",
    "\n",
    "        # Insert patient into the priority queue\n",
    "        user_queue.insert(patient_features)\n",
    "\n",
    "        return redirect('/')\n",
    "    else:\n",
    "        return render_template('index.html')\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    user_queue = PatientQueue(loaded_model)\n",
    "    app.run(debug=True)\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
